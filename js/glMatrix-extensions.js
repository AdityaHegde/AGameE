vec3.angle = function (a, b) {
  return Math.acos(vec3.dot(a, b)/(vec3.length(a)*vec3.length(b)));
};

vec3.project = function(a, b, c) {
  (c||c=a);
  vec3.scale(c, vec3.dot(a, b));
  return c;
};

line = {};
//perpendicular point on l2 from l1 with distance h, starting points p11, p21 respectively
line.perpPointFromLine = function(l1, p11, l2, p21, h) {
  var n1 = vec3.normalize(l1, []), n2 = vec3.normalize(l2, []), result = [];
  var c0=(-1*Math.pow(h, 2)+Math.pow((p11[0]+-1*p21[0]+n2[0]*2*(n2[1]*p11[1]*p21[1]+n2[2]*p11[2]*p21[2]+p11[0]*p21[0]*Math.pow(n2[0], 2))), 2)+Math.pow((p11[1]+-1*p21[1]+n2[1]*2*(n2[0]*p11[0]*p21[0]+n2[2]*p11[2]*p21[2]+p11[1]*p21[1]*Math.pow(n2[1], 2))), 2)+Math.pow((p11[2]+-1*p21[2]+n2[2]*2*(n2[0]*p11[0]*p21[0]+n2[1]*p11[1]*p21[1]+p11[2]*p21[2]*Math.pow(n2[2], 2))), 2)),c1=(4*n1[2]*p11[2]*p21[2]*(-1+p11[2]*p21[2]*Math.pow(n2[2], 3)*(-2+-1*p11[2]*p21[2]*Math.pow(n2[2], 3)))+4*p11[1]*p21[1]*(-1*n1[1]+n2[1]*(n1[1]*p11[1]*p21[1]*Math.pow(n2[1], 2)*(-2+-1*p11[1]*p21[1]*Math.pow(n2[1], 3))+n2[2]*p11[2]*p21[2]*(n1[1]*(-2+-1*p11[2]*p21[2]*Math.pow(n2[2], 3)+n2[1]*p11[1]*p21[1]*(-1*n2[2]+-1*Math.pow(n2[1], 2)))+n1[2]*(-2+-1*p11[2]*p21[2]*Math.pow(n2[2], 3)+n2[1]*(-1*n2[2]*p11[2]*p21[2]+-1*p11[1]*p21[1]*Math.pow(n2[1], 2))))))+4*p11[0]*p21[0]*(-1*n1[0]+n2[0]*(n1[0]*p11[0]*p21[0]*Math.pow(n2[0], 2)*(-2+-1*p11[0]*p21[0]*Math.pow(n2[0], 3))+n2[2]*p11[2]*p21[2]*(n1[0]*(-2+-1*p11[2]*p21[2]*Math.pow(n2[2], 3)+n2[0]*p11[0]*p21[0]*(-1*n2[2]+-1*Math.pow(n2[0], 2)))+n1[2]*(-2+-1*p11[2]*p21[2]*Math.pow(n2[2], 3)+n2[0]*(-1*n2[2]*p11[2]*p21[2]+-1*p11[0]*p21[0]*Math.pow(n2[0], 2))))+n2[1]*p11[1]*p21[1]*(n1[2]*n2[2]*p11[2]*p21[2]*(-1*n2[0]+-1*n2[1])+n1[0]*(-2+-1*p11[0]*p21[0]*Math.pow(n2[0], 3)+-1*p11[2]*p21[2]*Math.pow(n2[2], 2)+n2[1]*(-1*n2[0]*p11[0]*p21[0]+-1*n2[2]*p11[2]*p21[2]+-1*p11[1]*p21[1]*Math.pow(n2[1], 2)))+n1[1]*(-2+-1*p11[1]*p21[1]*Math.pow(n2[1], 3)+-1*p11[2]*p21[2]*Math.pow(n2[2], 2)+n2[0]*(-1*n2[1]*p11[1]*p21[1]+-1*n2[2]*p11[2]*p21[2]+-1*p11[0]*p21[0]*Math.pow(n2[0], 2))))))),c2=(Math.pow(n1[0], 2)+Math.pow(n1[2], 2)*(1+Math.pow(n2[2], 2)*Math.pow(p11[2], 2)*Math.pow(p21[2], 2)*(Math.pow(n2[1], 2)+n2[2]*(-2+Math.pow(n2[2], 3))))+n1[1]*(n1[1]+n2[1]*p11[1]*p21[1]*(2*n1[2]*n2[2]*p11[2]*p21[2]*(-2+-1*p11[2]*p21[2]*Math.pow(n2[2], 3))+n2[1]*p11[1]*p21[1]*(-2*n1[2]*n2[2]*p11[2]*p21[2]*Math.pow(n2[1], 2)+n1[1]*(Math.pow(n2[2], 2)+n2[1]*(-2+Math.pow(n2[1], 3))))))+n2[0]*(n2[0]*(Math.pow(n1[1], 2)*Math.pow(n2[1], 2)*Math.pow(p11[1], 2)*Math.pow(p21[1], 2)+Math.pow(n1[2], 2)*Math.pow(n2[2], 2)*Math.pow(p11[2], 2)*Math.pow(p21[2], 2))+p11[0]*p21[0]*(-2*n2[0]*n1[1]*n2[1]*n1[2]*n2[2]*p11[1]*p21[1]*p11[2]*p21[2]+n1[0]*(2*n1[2]*n2[2]*p11[2]*p21[2]*(-2+-1*p11[2]*p21[2]*Math.pow(n2[2], 3))+2*n2[1]*p11[1]*p21[1]*(-1*n2[1]*n1[2]*n2[2]*p11[2]*p21[2]+n1[1]*(-2+-1*p11[1]*p21[1]*Math.pow(n2[1], 3)+-1*p11[2]*p21[2]*Math.pow(n2[2], 2)))+n2[0]*p11[0]*p21[0]*(n1[0]*(Math.pow(n2[1], 2)+Math.pow(n2[2], 2)+n2[0]*(-2+Math.pow(n2[0], 3)))+2*Math.pow(n2[0], 2)*(-1*n1[1]*n2[1]*p11[1]*p21[1]+-1*n1[2]*n2[2]*p11[2]*p21[2])))))),a=c1*c1-4*c0*c2;if(a<0||c1===0) return result;a=Math.sqrt(a);var d11=(-c1+2*a)/c0,d12=(-c1-2*a)/c0;
  var p12 = [0, 0, 0], p22 = [0, 0, 0], k = 0;
  d1=d11;p12[0]=(p11[0]+d1*n1[0]);p12[1]=(p11[1]+d1*n1[1]);p12[2]=(p11[2]+d1*n1[2]);k=((p12[0]+-1*p21[0])*n2[0]+(p12[1]+-1*p21[1])*n2[1]+(p12[2]+-1*p21[2])*n2[2]);p22[0]=(k*n2[0]+p21[0]);p22[1]=(k*n2[1]+p21[1]);p22[2]=(k*n2[2]+p21[2]);
  result.push([d1, [p22[0], p22[1], p22[2]]]);
  d1=d12;p12[0]=(p11[0]+d1*n1[0]);p12[1]=(p11[1]+d1*n1[1]);p12[2]=(p11[2]+d1*n1[2]);k=((p12[0]+-1*p21[0])*n2[0]+(p12[1]+-1*p21[1])*n2[1]+(p12[2]+-1*p21[2])*n2[2]);p22[0]=(k*n2[0]+p21[0]);p22[1]=(k*n2[1]+p21[1]);p22[2]=(k*n2[2]+p21[2]);
  result.push([d1, [p22[0], p22[1], p22[2]]]);
  return result;
};
line.perpPointFromPoint = function(l1, p1, p2) {
  var n = vec3.normalize(l1, []),
      p = [0, 0, 0], d1 = (p2[0] - p1[0])*n[0] + (p2[1] - p1[1])*n[1] + (p2[2] - p1[2])*n[2], d = d1 / vec3.length(l1);
  vec3.scale(n, d1);
  vec3.add(n, p1, p);
  return [p, d];
};
